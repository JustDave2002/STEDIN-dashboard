- hosts: master
  become: true
  tasks:

  - name: Update apt cache
    apt:
      update_cache: yes

  - name: Install prerequisites
    apt:
      name:
        - apt-transport-https
        - ca-certificates
        - curl
        - gpg
        - containerd
      state: present

  - name: Ensure containerd is started and enabled
    service:
      name: containerd
      state: started
      enabled: yes

  - name: Disable swap temporarily
    command: swapoff -a

  - name: Temporarily enable IP forwarding
    sysctl:
      name: net.ipv4.ip_forward
      value: '1'
      state: present
      sysctl_set: no  # Avoids modifying sysctl.conf to make the change temporary

  - name: Ensure the directory /etc/apt/keyrings exists
    file:
      path: /etc/apt/keyrings
      state: directory
      mode: '0755'

  - name: Download Kubernetes apt key
    get_url:
      url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
      dest: /tmp/Release.key

  - name: Add Kubernetes apt key to keyring
    command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/Release.key
    args:
      creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

  - name: Add Kubernetes apt repository
    copy:
      dest: /etc/apt/sources.list.d/kubernetes.list
      content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
      mode: '0644'

  - name: Update apt cache after adding Kubernetes repo
    apt:
      update_cache: yes

  - name: Install kubelet, kubeadm, and kubectl
    apt:
      name:
        - kubelet
        - kubeadm
        - kubectl
      state: present

  - name: Hold kubelet, kubeadm, and kubectl at the current version
    command: sudo apt-mark hold kubelet kubeadm kubectl

  - name: Run kubeadm init (Control Plane Initialization)
    command: kubeadm init
    register: kubeadm_output
    ignore_errors: true  # Only for the first time when the control plane isn't set up yet

  - name: Ensure .kube directory exists for specified user
    file:
      path: "/home/{{ kube_user }}/.kube"
      state: directory
      mode: '0755'
      owner: "{{ kube_user }}"
      group: "{{ kube_user }}"

  - name: Copy Kubernetes admin.conf to user's kube config with root privileges
    become: yes
    become_user: root
    command: cp /etc/kubernetes/admin.conf /home/{{ kube_user }}/.kube/config

  - name: Set ownership for Kubernetes config file
    become: yes
    become_user: root
    file:
      path: "/home/{{ kube_user }}/.kube/config"
      owner: "{{ kube_user }}"
      group: "{{ kube_user }}"
      mode: '0644'

  - name: Install Calico network plugin
    become: yes
    become_user: "{{ kube_user }}"
    shell: |
      kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
    when: kubeadm_output.changed  # Only if 'kubeadm init' ran successfully