############################################################
# Global requirements - Run on all hosts
############################################################
- hosts: all
  become: true
  tasks:
    - name: Install common prerequisites
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gpg
          - containerd
        state: present

    - name: Ensure containerd is started and enabled
      service:
        name: containerd
        state: started
        enabled: yes

    - name: Disable swap
      command: swapoff -a

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        sysctl_set: no

    - name: Ensure the directory /etc/apt/keyrings exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes apt key
      get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key
        dest: /tmp/Release.key

    - name: Add Kubernetes apt key to keyring
      command: gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/Release.key
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      copy:
        dest: /etc/apt/sources.list.d/kubernetes.list
        content: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /"
        mode: '0644'

    - name: Update apt cache after adding Kubernetes repo
      apt:
        update_cache: yes

    - name: Install kubelet & kubeadm
      apt:
        name:
          - kubelet
          - kubeadm
        state: present

    - name: Hold kubelet & kubeadm at the current version
      command: apt-mark hold kubelet kubeadm kubectl

############################################################
# Master specific configuration - Run master-specific tasks
############################################################
- hosts: master
  become: true
  vars:
    kube_ports:
      - 6443  # API server port
      - 2379  # etcd server client API
      - 2380  # etcd server peer API
      - 10250 # kubelet API
      - 10251 # kube-scheduler (Deprecated)
      - 10252 # kube-controller-manager (Deprecated)
      - 10257 # kube-controller-manager
      - 10259 # Kube-scheduler

  tasks:

    - name: Retrieve global IP
      command: "curl -s ifconfig.me"
      register: global_ip
      changed_when: false

    - name: Set global IP fact
      set_fact:
        global_ip: "{{ global_ip.stdout }}"

    - name: List the global IP
      debug:
        msg: "Detected host IP of the environment: {{ global_ip }}"

    - name: Install iptables & kubectl
      apt:
        name:
          - iptables
          - kubectl
        state: present

    - name: Hold kubectl at the current version
      command: apt-mark hold kubectl

    - name: Stop all relevant services (kubelet, containerd, docker)
      service:
        name: "{{ item }}"
        state: stopped
      loop:
        - kubelet
        - containerd
        - docker
      ignore_errors: true

    - name: Use fuser to kill any process using Kubernetes ports aggressively
      shell: |
        for port in {{ kube_ports | join(' ') }}; do
          fuser -k -TERM ${port}/tcp || true
          sleep 1  # Give processes a chance to terminate
          fuser -k -KILL ${port}/tcp || true
        done
      ignore_errors: true

    - name: Prune Docker system to remove any leftover resources
      shell: |
        docker system prune -a -f || true
        docker network prune -f || true
        docker volume prune -f || true
      ignore_errors: true

    - name: Remove Kubernetes static manifests
      shell: |
        rm -rf /etc/kubernetes/manifests/*
      ignore_errors: true

    - name: Remove Kubernetes and CNI networking configurations
      shell: |
        rm -rf /etc/cni/net.d
        rm -rf /etc/kubernetes
        rm -rf /var/lib/cni/
        rm -rf /var/lib/etcd/
        ip link delete cni0 || true
        ip link delete flannel.1 || true
      ignore_errors: true

    - name: Flush all iptables rules
      shell: |
        iptables -F
        iptables -X
        iptables -t nat -F
        iptables -t nat -X
        iptables -t mangle -F
        iptables -t mangle -X
      ignore_errors: true

    - name: Clear conntrack table for Kubernetes ports
      shell: |
        for port in {{ kube_ports | join(' ') }}; do
          conntrack -D -p tcp --dport ${port} || true
        done
      ignore_errors: true

    - name: Ensure all necessary ports are free before continuing
      shell: |
        netstat -tuln | grep -E ':{{ kube_ports | join("|:") }}'
      register: ports_in_use
      failed_when: ports_in_use.stdout != ""
      changed_when: false
      ignore_errors: false

    - name: Start containerd and kubelet services
      service:
        name: "{{ item }}"
        state: started
      loop:
        - containerd
        - kubelet

    - name: Run kubeadm init (Control Plane Initialization)
      command: kubeadm init --apiserver-advertise-address="{{ global_ip }}"
      register: kubeadm_output
      ignore_errors: true

    - name: Check if kubeadm init succeeded
      fail:
        msg: "kubeadm init failed. Check the output for errors."
      when: kubeadm_output.rc != 0

    - name: Retrieve kubeadm join command
      command: kubeadm token create --print-join-command
      register: join_command
      when: kubeadm_output.rc == 0

    - name: Update join command to use the global IP
      set_fact:
        updated_join_command: "{{ join_command.stdout | regex_replace('join\\s+\\S+', 'join ' + global_ip + ':6443') }}"
      when: join_command is defined

    - name: Save join command to worker nodes
      copy:
        content: "{{ updated_join_command }}"
        dest: "/tmp/kubeadm_join_command.txt"
      when: join_command is defined
      delegate_to: "{{ item }}"
      loop: "{{ groups['worker'] }}"
      run_once: true

############################################################
# Worker specific configuration - Run worker-specific tasks
############################################################
- hosts: worker
  become: true
  tasks:
    - name: Check if worker is part of the cluster (from master node)
      delegate_to: "{{ groups['master'][0] }}"
      shell: |
        kubectl get nodes --kubeconfig /etc/kubernetes/admin.conf | grep "{{ inventory_hostname }}"
      register: check_node
      failed_when: check_node.rc not in [0, 1]
      changed_when: false
      ignore_errors: true

    - name: Determine if reset is required
      set_fact:
        reset_required: "{{ check_node.rc != 0 }}"

    - name: Reset the node if it is part of no cluster or a different cluster
      shell: kubeadm reset -f
      when: reset_required
      ignore_errors: true

    - name: Stop kubelet and containerd services if reset is required
      service:
        name: "{{ item }}"
        state: stopped
      loop:
        - kubelet
        - containerd
      when: reset_required

    - name: Remove CNI networking configurations and interfaces if reset is required
      shell: |
        rm -rf /etc/cni/net.d
        ip link delete cni0 || true
        ip link delete flannel.1 || true
      ignore_errors: true
      when: reset_required

    - name: Clean up Docker/Containerd leftover containers if reset is required
      shell: |
        crictl rm $(crictl ps -a -q) || true
      ignore_errors: true
      when: reset_required

    - name: Start kubelet and containerd services if reset was required
      service:
        name: "{{ item }}"
        state: started
      loop:
        - containerd
        - kubelet
      when: reset_required

    - name: Retrieve join command from /tmp folder
      command: cat /tmp/kubeadm_join_command.txt
      register: join_command_file

    - name: Join the Kubernetes cluster
      shell: "{{ join_command_file.stdout }}"
      register: join_status
      ignore_errors: true