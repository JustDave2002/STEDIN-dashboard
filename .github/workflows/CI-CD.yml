name: Test Build and Deploy

on:
  push:
    branches:
      - '**'  # This will trigger for any branch
  pull_request:
    branches:
      - main  # Trigger on PRs targeting the `main` branch

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Go
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Set up environment files
      - name: Set up environment variables
        run: |
          # Ensure empty .env files exist
          touch ./DB_seeding/.env
          touch ./go-backend/.env

          # Populate DB_seeding/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> ./DB_seeding/.env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> ./DB_seeding/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> ./DB_seeding/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> ./DB_seeding/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> ./DB_seeding/.env

          # Populate go-backend/.env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> ./go-backend/.env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> ./go-backend/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> ./go-backend/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> ./go-backend/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> ./go-backend/.env

      # Step 5: Start Docker Compose and DB
      - name: Starting DB Container
        working-directory: ./DB_seeding
        run: docker-compose up -d

      # Step 6: Wait-for-database loop
      - name: Wait for Database
        run: |
          source ./DB_seeding/.env
          for i in {1..20}; do
            echo "Attempt $i..."
            docker exec mariadb mariadb-admin ping -u root --password="$MYSQL_ROOT_PASSWORD" --host=0.0.0.0 && break
            echo "Waiting for database to be ready..."
            sleep 5
          done

      # Step 7: Seed the database
      - name: Seed the database
        working-directory: ./DB_seeding
        run: go run .

      # Step 8: Install dependencies for go-backend
      - name: Download dependencies for Go Backend
        working-directory: ./go-backend
        run: go mod download

      # Step 9: Build the Go backend
      - name: Build backend
        working-directory: ./go-backend
        run: go build -v ./...

      # Step 10: Run tests and upload results
      - name: Run tests
        id: tests
        working-directory: ./go-backend
        run: |
          go test -v ./... > test-results.txt
          if [ $? -ne 0 ]; then
            exit 1
          fi

      # Step 11: Upload test results as an artifact
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: go-backend/test-results.txt

      # Step 12: Clean up
      - name: Tear down Docker Compose
        if: always()
        working-directory: ./DB_seeding
        run: docker-compose down

  build:
    needs: test  # This job runs only if the `test` job succeeds
    if: github.ref == 'refs/heads/main'  # Ensure this runs only on the `main` branch
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      #      login to docker
      - name: Login to GitHub Container Registry
        run: echo "${{secrets.GHCR_TOKEN}}" | docker login ghcr.io -u justdave2002 --password-stdin


      # Step 2: Set up environment variables for the backend and DB seeding
      - name: Set up environment variables
        run: |
          # Ensure empty .env files exist for both backend and DB seeding
          touch ./DB_seeding/.env.docker
          touch ./DB_seeding/.env
          touch ./go-backend/.env.docker
          touch ./go-backend/.env
          touch ./next-frontend/.env.docker

          # Populate .env files for DB seeding
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}" >> ./DB_seeding/.env.docker
          echo "MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }}" >> ./DB_seeding/.env.docker
          echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> ./DB_seeding/.env.docker
          echo "DB_HOST=${{ secrets.PROD_DB_HOST }}" >> ./DB_seeding/.env.docker
          echo "DB_PORT=${{ secrets.PROD_DB_PORT }}" >> ./DB_seeding/.env.docker

          # Populate .env files for Go Backend
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.PROD_MYSQL_ROOT_PASSWORD }}" >> ./go-backend/.env.docker
          echo "MYSQL_DATABASE=${{ secrets.PROD_MYSQL_DATABASE }}" >> ./go-backend/.env.docker
          echo "DB_USER=${{ secrets.PROD_DB_USER }}" >> ./go-backend/.env.docker
          echo "DB_HOST=${{ secrets.PROD_DB_HOST }}" >> ./go-backend/.env.docker
          echo "DB_PORT=${{ secrets.PROD_DB_PORT }}" >> ./go-backend/.env.docker

          # Populate .env.docker for Frontend
          echo "NEXT_PUBLIC_BACKEND_URL=${{ secrets.NEXT_PUBLIC_BACKEND_URL }}" >> ./next-frontend/.env.docker

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build Docker Images
        run: |
          docker-compose -f docker-compose.prod.yml build

      - name: Push Docker Images to GHCR
        run:  |
          docker tag backend ghcr.io/justdave2002/backend:latest
          docker tag frontend ghcr.io/justdave2002/frontend:latest
          docker tag seeder ghcr.io/justdave2002/seeder:latest
          docker push ghcr.io/justdave2002/backend:latest
          docker push ghcr.io/justdave2002/frontend:latest
          docker push ghcr.io/justdave2002/seeder:latest



  deploy:
    needs: build
    runs-on: ubuntu-latest
    container: ghcr.io/railwayapp/cli:latest

    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    steps:
      - name: Deploy Backend
        run: railway redeploy --service=32886956-b583-45b8-92a0-b1fd65bb51ea --yes

      - name: Deploy Frontend
        run: railway redeploy --service=4596c9fe-54e4-4d34-9b79-fb549beabdc2 --yes

      - name: Deploy Seeder (Run Once)
        run: railway redeploy --service=5b41c7c7-145b-4468-b3dc-eda0cd47578d --yes
